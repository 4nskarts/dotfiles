prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" [${s}]";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}


usernamecolor=$(tput setaf 35);
locationcolor=$(tput setaf 33);
workingdirectorycolor=$(tput setaf 35);
white=$(tput setaf 15);
gitstatuscolor=$(tput setaf 220);
bold=$(tput bold);
reset=$(tput sgr0);

PS1="\[\033]0;\w\007\]\n"; # Displays current working directory as title of the terminal
#PS1+="\[${bold}\]\n(\d) \T\n";
PS1+="┌──\[${locationcolor}\][ubuntu@"; # Displays username
#PS1+="\[${white}\] at ";
PS1+="\[${locationcolor}\]ubuntu]" # Displays host/device
PS1+="\[${white}\] in ";
PS1+="\[${workingdirectorycolor}\]\w"; # Displays base path of current working directory
PS1+="\$(prompt_git \"\[${white}\] on \[${gitstatuscolor}\]\" \"\[${gitstatuscolor}\]\")"; # Displays git status
PS1+="\n\[${reset}\]└─";
PS1+="\[${white}\]\$ \[${reset}\]";
export PS1;

# Quickly find out external IP address for your device by typing 'xip'
# Make a directory and jump right into it. Combination of mkdir and cd. Just use 'mkcdir folder_name'
mkcdir()
{
	mkdir -p -- "$1" &&
		cd -P -- "$1"
}

# Update, upgrade and clean apt packages in your system with just one command. Just type 'update' in terminal
update () {
	echo -e "\nStarting system update..."
	echo -e "\nUpdating list of available apt packages and their versions..."
	sudo apt update -qq
	echo -e "\nUpgrading apt packages to newer version..."
	sudo apt upgrade -yy
	echo -e "\nRemoving packages no more needed as dependencies..."
	sudo apt autoremove -yy
	echo -e "\nRemoving packages that can no longer be downloaded..."
	sudo apt autoclean
	echo -e "\nClearing out local repository of retrieved package files..."
	sudo apt clean
	echo -e "\nUpdate complete!"
}
# Shows current weather, live currency and a random quote at terminal startup.
# Comment any or all below to disable startup runs for each.
alias ls='lsd'
alias l='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lt='ls --tree'
alias ..='cd ..'
alias c='clear'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'

apt() {
  command nala "$@"
}
sudo() {
  if [ "$1" = "apt" ]; then
    shift
    command sudo nala "$@"
  else
    command sudo "$@"
  fi
}

alias grep='grep --color=auto --binary-files=without-match' 
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -iv'
alias mkdir='mkdir -p'
alias ps='ps auxf'
alias ping='ping -c 10'
alias less='less -R'

# Extracts any archive(s) (if unp isn't installed)
ex () {
	for archive in $*; do
		if [ -f $archive ] ; then
			case $archive in
				*.tar.bz2)   tar xvjf $archive    ;;
				*.tar.gz)    tar xvzf $archive    ;;
				*.bz2)       bunzip2 $archive     ;;
				*.rar)       rar x $archive       ;;
				*.gz)        gunzip $archive      ;;
				*.tar)       tar xvf $archive     ;;
				*.tbz2)      tar xvjf $archive    ;;
				*.tgz)       tar xvzf $archive    ;;
				*.zip)       unzip $archive       ;;
				*.Z)         uncompress $archive  ;;
				*.7z)        7z x $archive        ;;
				*)           echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}
